@using Blazor.FlexGrid
@using Show_SimpleDreamer_API_Servers.Shared
@using Blazor.FlexGrid.DataAdapters
@using Blazor.FlexGrid.Components.Events
@using System.Timers;
@inject HttpClient Http
@inject MasterTableDataAdapterBuilder<BasicBackendInformation> MasterAdapterBuilder
@page "/masterdetailgrid"

<h2>Registered SimpleDreamer API Servers</h2>

<GridView DataAdapter="@customersMasterDataAdapter" />

<h6 align="right">@_LastUpdatedInformation</h6>

@code{
string _LastUpdatedInformation;
Timer _timer;

IEqualityComparer<BasicBackendInformation> tableEntryComparer;

CollectionTableDataAdapter<BasicBackendInformation> customerDataAdapter;
MasterTableDataAdapter<BasicBackendInformation> customersMasterDataAdapter;
List<BasicBackendInformation> allCustomers;

protected override async Task OnInitAsync()
{
    await UpdateCompleteTable();

    _timer = new System.Timers.Timer(10000);
    _timer.Elapsed += new ElapsedEventHandler(_timer_Elapsed);
    _timer.Start();

    // We're comparing based on the Id property
    tableEntryComparer = EqualityComparerFactory.Create<BasicBackendInformation>(
        a => a.IpAddress.GetHashCode(),
        (a, b) => 0 == string.Compare((a.IpAddress + ":" + a.Port), (b.IpAddress + ":" + b.Port)));
}

public async Task UpdateCompleteTable()
{
    var received = await Http.GetJsonAsync<BasicBackendInformation[]>("api/BasicBackendInformation/BasicBackendInformationTest");
    allCustomers = received.ToList();
    customerDataAdapter = new CollectionTableDataAdapter<BasicBackendInformation>(allCustomers);

    customersMasterDataAdapter = MasterAdapterBuilder
        .MasterTableDataAdapter(customerDataAdapter)
        .Build();

    UpdateInformationLabel();
}

protected async void _timer_Elapsed(object sender, ElapsedEventArgs e)
{
    await IncrementCount();

    await Invoke(() => StateHasChanged());
}

private void UpdateInformationLabel()
{
    _LastUpdatedInformation = "Last time update: " + DateTime.Now.ToString();
}

protected async Task IncrementCount()
{
    var received = await Http.GetJsonAsync<BasicBackendInformation[]>("api/BasicBackendInformation/BasicBackendInformationTest");

    /* Add new entries */
    foreach (BasicBackendInformation singleBackendInformation in received.ToList())
    {
        if (!allCustomers.Contains(singleBackendInformation, tableEntryComparer))
        {
            allCustomers.Add(singleBackendInformation);
        }
    }

    /* Remove vanished entries */
    List<BasicBackendInformation> toDelete = new List<BasicBackendInformation>();

    foreach (BasicBackendInformation singleBackendInformation in allCustomers)
    {
        if (!received.Contains(singleBackendInformation, tableEntryComparer))
        {
            toDelete.Add(singleBackendInformation);
        }
    }

    foreach (BasicBackendInformation singleBackendInformation in toDelete)
    {
        allCustomers.Remove(singleBackendInformation);
    }

     UpdateInformationLabel();
}
}