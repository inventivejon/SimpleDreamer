@using Blazor.FlexGrid
@using Show_SimpleDreamer_API_Servers.Shared
@using Blazor.FlexGrid.DataAdapters
@using Blazor.FlexGrid.Components.Events
@using System.Timers;
@inject HttpClient Http
@inject MasterTableDataAdapterBuilder<BasicBackendInformation> MasterAdapterBuilder
@* @inject LazyLoadedTableDataAdapter<Order> ordersAdapter *@
@page "/masterdetailgrid"

<h1>Customers</h1>

<h1>@_counter</h1>

<button class="btn btn-primary" @onclick="@IncrementCount">Click me</button>

<GridView DataAdapter="@customersMasterDataAdapter"
          PageSize="5"
          SaveOperationFinished="@ItemSavedOperationFinished">
</GridView>

@code{
int _counter;
Timer _timer;


CollectionTableDataAdapter<BasicBackendInformation> customerDataAdapter;
//CollectionTableDataAdapter<CustomerAddress> customerAddressesDataAdapter;
MasterTableDataAdapter<BasicBackendInformation> customersMasterDataAdapter;
List<BasicBackendInformation> allCustomers;

protected override async Task OnInitAsync()
{
    int value = await UpdateCompleteTable();

    _timer = new System.Timers.Timer(1000);
    _timer.Elapsed += new ElapsedEventHandler(_timer_Elapsed);
    _timer.Start();
}

public async Task<int> UpdateCompleteTable()
{
    var received = await Http.GetJsonAsync<BasicBackendInformation[]>("api/BasicBackendInformation/BasicBackendInformation");
    allCustomers = received.ToList();
    // var customersAddresses = await Http.GetJsonAsync<CustomerAddress[]>("api/Customer/CustomersAddresses");
    customerDataAdapter = new CollectionTableDataAdapter<BasicBackendInformation>(allCustomers);
    // customerAddressesDataAdapter = new CollectionTableDataAdapter<CustomerAddress>(customersAddresses);

    customersMasterDataAdapter = MasterAdapterBuilder
        .MasterTableDataAdapter(customerDataAdapter)
        //.WithDetailTableDataAdapter(ordersAdapter)
        //.WithDetailTableDataAdapter(customerAddressesDataAdapter)
        .Build();


    return _counter;
}

public void _timer_Elapsed(object sender, ElapsedEventArgs e)
{
    Console.WriteLine(DateTime.Now.ToString("{hh:mm:ss.fff}"));
    _counter++;
    //if (_counter >= 20)
    //    _timer.Stop();

    //var customers = new Customer[1];
    //    customers[0].Address = "None";

    //allCustomers.Clear();

    /*
        customerDataAdapter = new CollectionTableDataAdapter<Customer>(customers);
        customersMasterDataAdapter = MasterAdapterBuilder
            .MasterTableDataAdapter(customerDataAdapter)
            //.WithDetailTableDataAdapter(ordersAdapter)
            //.WithDetailTableDataAdapter(customerAddressesDataAdapter)
            .Build();
            */

    base.StateHasChanged();
}

public void IncrementCount()
{
    _counter++;
}

public void ItemSavedOperationFinished(SaveResultArgs saveResultArgs)
{
    Console.WriteLine($"Item saved result: {saveResultArgs.ItemSucessfullySaved}");
}
}